type Query {
  problems: [ProblemInfo]
  problem(id: ID!): ProblemInfo
}

type Mutation {
  createProblem(id: ID!, file: String!): ProblemInfo
  # getProblem(id: ID!): ProblemInfo
  deleteProblem(id: ID!): ID
  updateProblemInfo(id: ID!, input: ProblemInfoInput): ProblemInfo
  updateProblemSolution(id: ID!, route: RouteInput): ProblemInfo
}

input ProblemInfoInput {
  name: String
  dimension: Int
  vehicles: Int
  optimalValue: Int
  capacity: Int
  depotNode: Int
  nodeData: [NodeInfoInput]
}

type ProblemInfo {
  id: ID!
  name: String
  dimension: Int
  vehicles: Int
  optimalValue: Int
  capacity: Int
  depotNode: Int
  nodeData: [NodeInfo]
  solution: Solution
  file: [Int]
}

input NodeInfoInput {
  node: Int
  latitude: Float
  longitude: Float
  demand: Int
  priority: Int
}

type NodeInfo {
  node: Int
  latitude: Float
  longitude: Float
  demand: Int
  priority: Int
}

type Solution {
  routes: [Route]
  totalDistance: Int
}

input RouteInput {
  tour: [Int]
  tourDistance: Int
}

type Route {
  tour: [Int]
  tourDistance: Int
}
