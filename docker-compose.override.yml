name: vrp-backend

services:

  node:
    build:
      context: .
      args:
        - NODE_ENV=development
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    # NOTE: in DockerFile last pwd is /opt/node_app/app. Below command depends on it.
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./server.js
    ports:
      - "8080:3000"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - .:/opt/node_app/app
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # NOTE: this won't work on Docker Toolbox (virtualbox) which doesn't bind-mount single files
      # docker-compose exec node npm install --save bower
      - ./package.json:/opt/node_app/package.json
      # - ./package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/node_app/app/node_modules
    environment:
      - NODE_ENV=development
      - MONGO_URL=mongodb://root-local:example-local@mongo:27017/exampleDb?authMechanism=DEFAULT&authSource=admin
      - MONGO_USERNAME=root-local
      - MONGO_PASSWORD=example-local
      - MONGO_HOSTNAME=mongo
      - MONGO_PORT=27017
      - MONGO_DATABASE_NAME=exampleDb
      - SOLVER_URL=http://solver:8000/
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      disable: true

  mongo:
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root-local
      - MONGO_INITDB_ROOT_PASSWORD=example-local
      - MONGO_INITDB_DATABASE=exampleDb
    volumes:
      # this is an example of how to seed data in mongo containers. The Docker Hub mongo README
      # explains that any data dropped into the docker-entrypoint-initdb.d directory will be injected 
      # into mongo at startup. This is also a common pattern for other db solutions like mysql or psql
      # - ./database/seed.js:/docker-entrypoint-initdb.d/seed.js
      - mongodata:/data/db
    # we need to check health here, so that docker-compose will wait for a healthy mongo before it starts node
    healthcheck:
      test: "[ `echo 'db.runCommand(\"ping\").ok' | mongo localhost/exampleDb --quiet` ] && echo 0 || echo 1"
      interval: 5s
      start_period: 10s
      timeout: 4s
      retries: 3

volumes:
  mongodata:
  notused:
